when platform != 'linux':
  extends: [distutils_package]
when platform == 'linux':
  extends: [distutils_package, libflags]
dependencies:
  build: [blas, lapack, numpy]
  run: [blas, lapack, numpy]

sources:
  - url: https://github.com/scipy/scipy/releases/download/v0.17.1/scipy-0.17.1.tar.gz #http://downloads.sourceforge.net/scipy/scipy-0.13.3.tar.gz
    key: tar.gz:trgnf6abhtcaqqrqudufrv3effr5xlp5

defaults:
  # Build with OpenBLAS
  with_openblas: false
  # Build with Intel MKL
  with_mkl: false

build_stages:
  - when: platform == 'linux' and not with_openblas
    name: set-lapack-paths
    after: libflags
    before: install
    handler: bash
    bash: |
      export LDFLAGS="$LDFLAGS -shared"
      export ATLAS=$LAPACK_DIR
      export BLAS=$LAPACK_DIR
      export LAPACK=$LAPACK_DIR

  - when: with_mkl
    name: create-site.cfg
    after: prologue
    before: install
    handler: bash
    bash: |
      cat > site.cfg << EOF
      [mkl]
      library_dirs = ${MKLPATH}
      include_dirs = ${MKLROOT}/include
      mkl_libs = mkl_rt
      lapack_libs = mkl_rt
      EOF

  - when: with_mkl
    name: set-LDFLAGS
    after: prologue
    before: install
    handler: bash
    bash: |
      export LDFLAGS="-shared -Wl,-rpath=${PYTHON_DIR}/lib -Wl,-rpath=${MKLPATH} $(${PYTHON_DIR}/bin/python-config --ldflags)"
      export LAPACK=None
      export BLAS=None
      export ATLAS=None

  - when: platform == 'linux' and with_openblas and not with_mkl
    name: set-lapack-paths
    after: libflags
    before: install
    handler: bash
    bash: |
      export LDFLAGS="-shared -Wl,-rpath=${PYTHON_DIR}/lib -Wl,-rpath=${BLAS_DIR}/lib $(${PYTHON_DIR}/bin/python-config --ldflags)"
      #export ATLAS=None
      export LAPACK=${BLAS_DIR}/lib/libopenblas.so
      export BLAS=${BLAS_DIR}/lib/libopenblas.so

# Make sure that the fortran objects are compiled with -fPIC
  - when: platform == 'linux'
    name: compile-fc-with-fPIC
    after: setup_dirs
    before: install
    handler: bash
    bash: |
      export FFLAGS="$FFLAGS -fPIC"
      export FCFLAGS="$FCFLAGS -fPIC"
